errorlist$gd <- gd
saveRDS(errorlist, "~/Dropbox/앱/ShareLaTeX/(Park)EDrought/errorlist.RDS")
gd$dependence$coefficients
is.na(gd$dependence$coefficients)
sum(is.na(gd$dependence$coefficients))
source('~/Dropbox/R files/PCIC/Heffernan/sources/source_SC_texmex_spatial.R', chdir = TRUE)
bootmex_start <- TRUE
time_init <- Sys.time()
if(bootmex_start==TRUE){
bootmex_spatial_obj <- bootmex.spatial(x=mexDep_spatial_obj,
#par.lower=par.lower, par.upper=par.upper, known.par=known.par, par.names=par.names,
#xy_grid=xy_grid,
mexDep_HT= mexDep_imsi, R=100)
}
#x=mexDep_spatial_obj; mexDep_HT= mexDep_imsi; R=100
bootmex_start <- TRUE
time_init <- Sys.time()
if(bootmex_start==TRUE){
bootmex_spatial_obj <- bootmex.spatial(x=mexDep_spatial_obj,
#par.lower=par.lower, par.upper=par.upper, known.par=known.par, par.names=par.names,
#xy_grid=xy_grid,
mexDep_HT= mexDep_imsi, R=100)
}
#x=mexDep_spatial_obj; mexDep_HT= mexDep_imsi; R=100
bootmex_spatial_obj
plot_bootmex_supp <- function(h, bootmexobj, names_candidate=NULL){
if(is.null(names_candidate)){
names_candidate <- c("kapp", "lambda", "alpha", "alpha_KS3", "bet", "bet_KS1", "bet_KS2", "rho", "phi", "sigm", "sigm_KS1", "sigm_KS2", "mu", "mu_KS1", "mu_KS2", "mu_KS3", "delta1", "delta2", "Stretch", "Angle")
}
for(i in 1:length(rownames(bootmexobj$dependence))){
assign(rownames(bootmexobj$dependence)[i], bootmexobj$dependence[i,1])
}
other_names <- setdiff(names_candidate, rownames(bootmexobj$dependence))
if(length(other_names)!=0){
for(j in 1:length(other_names)){
assign(other_names[j], NULL)
}
}
#alpha_result_vec <- c()
if(is.null(alpha)){
alpha <- 1
}
if(is.null(kapp)){
kapp <- 1
}
if(is.null(alpha_KS3)){
alpha_KS3 <- 0
}
if(!is.null(lambda) & !is.null(h)){
alpha_obj <- (alpha_KS3+ (alpha-alpha_KS3)*exp(-((h-0)/lambda)^kapp))
}else{
alpha_obj <- as.numeric(rep(alpha, length(h)))
}
plot(h, alpha_obj)
#bet_result_vec <- c()
if(is.null(bet)){
bet <- 1
}
if(is.null(bet_KS1)){
bet_KS1 <- 1
}
if(!is.null(bet_KS2) & !is.null(h)){
bet_obj <- (bet*exp(-((h-0)/bet_KS2)^(bet_KS1)))
}else{
bet_obj <- as.numeric(rep(bet, length(h)))
}
plot(h, bet_obj)
#sigm_result_vec <- c()
if(is.null(sigm)){
if(!is.null(h) & !is.null(sigm_KS1) & !is.null(sigm_KS2)){
sigm_new <- 1*(1-exp(-(h/sigm_KS2)^(sigm_KS1))) #원 논문이 잘못되어 수정함
}else{
stop("Input error: when sigm is NULL, you must set sigm_KS1, sigm_KS2, and h")
}
}else{
if(!is.null(h) & !is.null(sigm_KS1) & !is.null(sigm_KS2)){
#모수 3개
#if(model=="Shooter"){
sigm_new <- sigm*(1-exp(-(h/sigm_KS2)^(sigm_KS1))) #원 논문이 잘못되어 수정함
#}
}else if(!is.null(h) & is.null(sigm_KS1) & !is.null(sigm_KS2)){
sigm_new <- sigm*(1-exp(-(h/sigm_KS2)^1)) #원 논문이 잘못되어 수정함
}else if(!is.null(sigma) & is.null(sigma_KS1) & !is.null(sigma_KS2)){
#모수 1개
sigm_new <- as.numeric(rep(sigm, length(h)))
#stop("Input error: when sigm is !NULL, you must set sigm_KS1, sigm_KS2, and h")
}
}
sigm_obj <- sigm_new
#plot(h, sigm_obj)
#mu_result_vec <- c()
if(is.null(mu)){
mu <- 1
}
if(is.null(mu_KS1)){
mu_KS1 <- 1
}
if(is.null(mu_KS3)){
mu_KS3 <- 0
}
if(!is.null(mu_KS2) & !is.null(h)){
mu_obj <- mu_KS3+ (mu-mu_KS3)*exp(-(h/mu_KS2)^mu_KS1)
}else{
mu_obj <- as.numeric(rep(mu, length(h)))
}
#plot(h, mu_obj)
#delta_result_vec <- c()
delta_obj <- 1 + exp(-(h/delta1)^(delta2))
#plot(h, 1 + exp(-(h/delta1)^(delta2)) , col="blue", type="l", main=expression(paste("(e) ", delta ,"(h)")), xlab="h", ylab=expression(paste(delta, "(h)")), cex.main=1.5)
#points(h_new, 1 + exp(-(h_new/delta1)^(delta2)), pch=16, col="gray")
rho_obj <- exp(-h/rho)
#plot(h, exp(-h/rho) , type="l", col="blue", main=expression(paste("(f) ", rho ,"(h)")), xlab="h", ylab=expression(paste(rho, "(h)")), cex.main=1.5)
#points(h_new, exp(-h_new/rho), pch=16, col="gray")
res <- list()
res$alpha_obj <- alpha_obj
res$bet_obj <- bet_obj
res$sigm_obj <- sigm_obj
res$mu_obj <- mu_obj
res$delta_obj <- delta_obj
res$rho_obj <- rho_obj
return(res)
}
#plot_bootmex_supp(h=h_boot_vec, bootmexobj=bootmex_spatial_obj$boot[[1]])
plot_bootmex_supp_obj <- lapply(bootmex_spatial_obj$boot, function(x) plot_bootmex_supp(h=h_boot_vec, bootmexobj=x))
alpha_obj_mat <-c()
bet_obj_mat <-c()
sigm_obj_mat <-c()
mu_obj_mat <-c()
delta_obj_mat <-c()
rho_obj_mat <-c()
for(i in 1:length(plot_bootmex_supp_obj)){
alpha_obj_mat <- cbind(alpha_obj_mat, plot_bootmex_supp_obj[[i]]$alpha_obj)
bet_obj_mat <- cbind(bet_obj_mat, plot_bootmex_supp_obj[[i]]$bet_obj)
sigm_obj_mat <- cbind(sigm_obj_mat, plot_bootmex_supp_obj[[i]]$sigm_obj)
mu_obj_mat <- cbind(mu_obj_mat, plot_bootmex_supp_obj[[i]]$mu_obj)
delta_obj_mat <- cbind(delta_obj_mat, plot_bootmex_supp_obj[[i]]$delta_obj)
rho_obj_mat <- cbind(rho_obj_mat, plot_bootmex_supp_obj[[i]]$rho_obj)
}
alpha_CI <- cbind(apply(alpha_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(alpha_obj_mat, 1, function(x) quantile(x, prob=0.9)))
bet_CI <- cbind(apply(bet_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(bet_obj_mat, 1, function(x) quantile(x, prob=0.9)))
sigm_CI <- cbind(apply(sigm_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(sigm_obj_mat, 1, function(x) quantile(x, prob=0.9)))
mu_CI <- cbind(apply(mu_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(mu_obj_mat, 1, function(x) quantile(x, prob=0.9)))
delta_CI <- cbind(apply(delta_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(delta_obj_mat, 1, function(x) quantile(x, prob=0.9)))
rho_CI <- cbind(apply(rho_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(rho_obj_mat, 1, function(x) quantile(x, prob=0.9)))
bootmex_spatial_obj
bootmex
bootmex_s
is.null(bootmex_s)
##save object
saveobj <- TRUE
if(saveobj==TRUE){
#include: study_region
#include: model_name (study_model)
#include: mqu (dqu)
newdqu <- as.integer(10*dqu)
#include: pqu (그냥 다 포함, list 원소로)
#include: conditioning station (central_index)
#include: method (그냥 다 포함, list 원소로)
period <- "Summer-Autumn"
save_name <- paste(study_region, period, study_model, newdqu, central_index, sep="_")
save_list <- list()
save_list$study_region <- study_region
save_list$study_model <- study_model
save_list$dqu <- dqu
save_list$central_index <- central_index
save_list$xy_grid <- xy_grid_old
#save_list$xy_grid_new <- xy_grid
#save_list$realdata <- migpd_obj$data
save_list$realdata <- mexDep_spatial_obj_pred_8$data$real
save_list$proposed_coefficients <- mexDep_spatial_obj$dependence$coefficients
save_list$proposed_loglik <- mexDep_spatial_obj$dependence$loglik
save_list$HT_coefficients <- mexDep_imsi$dependence$coefficients
save_list$HT_loglik <- mexDep_spatial_obj$dependence$loglik
save_list$is_aniso <- mexDep_spatial_obj$dependence$aniso
save_list$fct_alpha <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_alpha
save_list$fct_bet <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_bet
save_list$fct_sigm <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_sigm
save_list$fct_mu <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_mu
save_list$alpha_vec <- mexDep_spatial_obj$dependence$alpha
save_list$beta_vec <- mexDep_spatial_obj$dependence$beta
save_list$modelbeta <- mexDep_spatial_obj$dependence$modelbeta
save_list$spatialmethod <- mexDep_spatial_obj$dependence$spatialmethod
save_list$par_names <- mexDep_spatial_obj$dependence$par.names
save_list$Sigma_mat <- mexDep_spatial_obj$dependence$Sigma_mat
save_list$Sigma_mat_extended <- mexDep_spatial_obj$dependence$Sigma_mat_extended
save_list$proposed_8 <- mexDep_spatial_obj_pred_8$data$simulated
save_list$proposed_9 <- mexDep_spatial_obj_pred_9$data$simulated
save_list$proposed_95 <- mexDep_spatial_obj_pred_95$data$simulated
save_list$proposed_99 <- mexDep_spatial_obj_pred_99$data$simulated
save_list$HT_8 <- mexDep_imsi_pred_8$data$simulated
save_list$HT_9 <- mexDep_imsi_pred_9$data$simulated
save_list$HT_95 <- mexDep_imsi_pred_95$data$simulated
save_list$HT_99 <- mexDep_imsi_pred_99$data$simulated
save_list$CANGRD_8 <- CANGRD_mexDep_imsi_pred_8$data$simulated
save_list$CANGRD_9 <- CANGRD_mexDep_imsi_pred_9$data$simulated
save_list$CANGRD_95 <- CANGRD_mexDep_imsi_pred_95$data$simulated
save_list$CANGRD_99 <- CANGRD_mexDep_imsi_pred_99$data$simulated
#save_list$bootmex <- bootmex_spatial_obj
setwd("~/Dropbox/Github/paper-EDrought/prediction")
saveRDS(save_list, file=paste(save_name, '(2).RDS', sep=""))
}
##save object
saveobj <- TRUE
if(saveobj==TRUE){
#include: study_region
#include: model_name (study_model)
#include: mqu (dqu)
newdqu <- as.integer(10*dqu)
#include: pqu (그냥 다 포함, list 원소로)
#include: conditioning station (central_index)
#include: method (그냥 다 포함, list 원소로)
period <- "Summer-Autumn"
save_name <- paste(study_region, period, study_model, newdqu, central_index, sep="_")
save_list <- list()
save_list$study_region <- study_region
save_list$study_model <- study_model
save_list$dqu <- dqu
save_list$central_index <- central_index
save_list$xy_grid <- xy_grid_old
#save_list$xy_grid_new <- xy_grid
#save_list$realdata <- migpd_obj$data
save_list$realdata <- mexDep_spatial_obj_pred_8$data$real
save_list$proposed_coefficients <- mexDep_spatial_obj$dependence$coefficients
save_list$proposed_loglik <- mexDep_spatial_obj$dependence$loglik
save_list$HT_coefficients <- mexDep_imsi$dependence$coefficients
save_list$HT_loglik <- mexDep_spatial_obj$dependence$loglik
save_list$is_aniso <- mexDep_spatial_obj$dependence$aniso
save_list$fct_alpha <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_alpha
save_list$fct_bet <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_bet
save_list$fct_sigm <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_sigm
save_list$fct_mu <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_mu
save_list$alpha_vec <- mexDep_spatial_obj$dependence$alpha
save_list$beta_vec <- mexDep_spatial_obj$dependence$beta
save_list$modelbeta <- mexDep_spatial_obj$dependence$modelbeta
save_list$spatialmethod <- mexDep_spatial_obj$dependence$spatialmethod
save_list$par_names <- mexDep_spatial_obj$dependence$par.names
save_list$Sigma_mat <- mexDep_spatial_obj$dependence$Sigma_mat
save_list$Sigma_mat_extended <- mexDep_spatial_obj$dependence$Sigma_mat_extended
save_list$proposed_8 <- mexDep_spatial_obj_pred_8$data$simulated
save_list$proposed_9 <- mexDep_spatial_obj_pred_9$data$simulated
save_list$proposed_95 <- mexDep_spatial_obj_pred_95$data$simulated
save_list$proposed_99 <- mexDep_spatial_obj_pred_99$data$simulated
save_list$HT_8 <- mexDep_imsi_pred_8$data$simulated
save_list$HT_9 <- mexDep_imsi_pred_9$data$simulated
save_list$HT_95 <- mexDep_imsi_pred_95$data$simulated
save_list$HT_99 <- mexDep_imsi_pred_99$data$simulated
save_list$CANGRD_8 <- CANGRD_mexDep_imsi_pred_8$data$simulated
save_list$CANGRD_9 <- CANGRD_mexDep_imsi_pred_9$data$simulated
save_list$CANGRD_95 <- CANGRD_mexDep_imsi_pred_95$data$simulated
save_list$CANGRD_99 <- CANGRD_mexDep_imsi_pred_99$data$simulated
save_list$bootmex <- bootmex_spatial_obj
setwd("~/Dropbox/Github/paper-EDrought/prediction")
saveRDS(save_list, file=paste(save_name, '(2).RDS', sep=""))
}
save_name
saveRDS(bootmex_spatial_obj, file=paste(save_name, '_bootmex.RDS', sep=""))
bootmex_spatial_obj
class(bootmex_spatial_obj)
saveRDS(bootmex_spatial_obj, file=paste(save_name[1], '_bootmex.RDS', sep=""))
##save object
saveobj <- TRUE
if(saveobj==TRUE){
#include: study_region
#include: model_name (study_model)
#include: mqu (dqu)
newdqu <- as.integer(10*dqu)
#include: pqu (그냥 다 포함, list 원소로)
#include: conditioning station (central_index)
#include: method (그냥 다 포함, list 원소로)
period <- "Summer-Autumn"
save_name <- paste(study_region, period, study_model, newdqu, central_index, sep="_")
save_list <- list()
save_list$study_region <- study_region
save_list$study_model <- study_model
save_list$dqu <- dqu
save_list$central_index <- central_index
save_list$xy_grid <- xy_grid_old
#save_list$xy_grid_new <- xy_grid
#save_list$realdata <- migpd_obj$data
save_list$realdata <- mexDep_spatial_obj_pred_8$data$real
save_list$proposed_coefficients <- mexDep_spatial_obj$dependence$coefficients
save_list$proposed_loglik <- mexDep_spatial_obj$dependence$loglik
save_list$HT_coefficients <- mexDep_imsi$dependence$coefficients
save_list$HT_loglik <- mexDep_spatial_obj$dependence$loglik
save_list$is_aniso <- mexDep_spatial_obj$dependence$aniso
save_list$fct_alpha <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_alpha
save_list$fct_bet <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_bet
save_list$fct_sigm <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_sigm
save_list$fct_mu <- mexDep_spatial_obj$dependence$nonlinear.obj$fct_mu
save_list$alpha_vec <- mexDep_spatial_obj$dependence$alpha
save_list$beta_vec <- mexDep_spatial_obj$dependence$beta
save_list$modelbeta <- mexDep_spatial_obj$dependence$modelbeta
save_list$spatialmethod <- mexDep_spatial_obj$dependence$spatialmethod
save_list$par_names <- mexDep_spatial_obj$dependence$par.names
save_list$Sigma_mat <- mexDep_spatial_obj$dependence$Sigma_mat
save_list$Sigma_mat_extended <- mexDep_spatial_obj$dependence$Sigma_mat_extended
save_list$proposed_8 <- mexDep_spatial_obj_pred_8$data$simulated
save_list$proposed_9 <- mexDep_spatial_obj_pred_9$data$simulated
save_list$proposed_95 <- mexDep_spatial_obj_pred_95$data$simulated
save_list$proposed_99 <- mexDep_spatial_obj_pred_99$data$simulated
save_list$HT_8 <- mexDep_imsi_pred_8$data$simulated
save_list$HT_9 <- mexDep_imsi_pred_9$data$simulated
save_list$HT_95 <- mexDep_imsi_pred_95$data$simulated
save_list$HT_99 <- mexDep_imsi_pred_99$data$simulated
save_list$CANGRD_8 <- CANGRD_mexDep_imsi_pred_8$data$simulated
save_list$CANGRD_9 <- CANGRD_mexDep_imsi_pred_9$data$simulated
save_list$CANGRD_95 <- CANGRD_mexDep_imsi_pred_95$data$simulated
save_list$CANGRD_99 <- CANGRD_mexDep_imsi_pred_99$data$simulated
save_list$bootmex <- bootmex_spatial_obj
setwd("~/Dropbox/Github/paper-EDrought/prediction")
saveRDS(save_list, file=paste(save_name[1], '(2).RDS', sep=""))
}
#saveRDS(bootmex_spatial_obj, file=paste(save_name[1], '_bootmex.RDS', sep=""))
#x=mexDep_spatial_obj; mexDep_HT= mexDep_imsi; R=100
time_end <- Sys.time()
time_end - time_init
h_boot_vec
h_seq
plot_bootmex_supp_obj <- lapply(bootmex_spatial_obj$boot, function(x) plot_bootmex_supp(h=h_seq, bootmexobj=x))
alpha_obj_mat <-c()
bet_obj_mat <-c()
sigm_obj_mat <-c()
mu_obj_mat <-c()
delta_obj_mat <-c()
rho_obj_mat <-c()
for(i in 1:length(plot_bootmex_supp_obj)){
alpha_obj_mat <- cbind(alpha_obj_mat, plot_bootmex_supp_obj[[i]]$alpha_obj)
bet_obj_mat <- cbind(bet_obj_mat, plot_bootmex_supp_obj[[i]]$bet_obj)
sigm_obj_mat <- cbind(sigm_obj_mat, plot_bootmex_supp_obj[[i]]$sigm_obj)
mu_obj_mat <- cbind(mu_obj_mat, plot_bootmex_supp_obj[[i]]$mu_obj)
delta_obj_mat <- cbind(delta_obj_mat, plot_bootmex_supp_obj[[i]]$delta_obj)
rho_obj_mat <- cbind(rho_obj_mat, plot_bootmex_supp_obj[[i]]$rho_obj)
}
alpha_CI <- cbind(apply(alpha_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(alpha_obj_mat, 1, function(x) quantile(x, prob=0.9)))
bet_CI <- cbind(apply(bet_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(bet_obj_mat, 1, function(x) quantile(x, prob=0.9)))
sigm_CI <- cbind(apply(sigm_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(sigm_obj_mat, 1, function(x) quantile(x, prob=0.9)))
mu_CI <- cbind(apply(mu_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(mu_obj_mat, 1, function(x) quantile(x, prob=0.9)))
delta_CI <- cbind(apply(delta_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(delta_obj_mat, 1, function(x) quantile(x, prob=0.9)))
rho_CI <- cbind(apply(rho_obj_mat, 1, function(x) quantile(x, prob=0.1)),
apply(rho_obj_mat, 1, function(x) quantile(x, prob=0.9)))
alpha_CI
plot_bootmex_supp <- function(h, bootmexobj, names_candidate=NULL){
if(is.null(names_candidate)){
names_candidate <- c("kapp", "lambda", "alpha", "alpha_KS3", "bet", "bet_KS1", "bet_KS2", "rho", "phi", "sigm", "sigm_KS1", "sigm_KS2", "mu", "mu_KS1", "mu_KS2", "mu_KS3", "delta1", "delta2", "Stretch", "Angle")
}
for(i in 1:length(rownames(bootmexobj$dependence))){
assign(rownames(bootmexobj$dependence)[i], bootmexobj$dependence[i,1])
}
other_names <- setdiff(names_candidate, rownames(bootmexobj$dependence))
if(length(other_names)!=0){
for(j in 1:length(other_names)){
assign(other_names[j], NULL)
}
}
#alpha_result_vec <- c()
if(is.null(alpha)){
alpha <- 1
}
if(is.null(kapp)){
kapp <- 1
}
if(is.null(alpha_KS3)){
alpha_KS3 <- 0
}
if(!is.null(lambda) & !is.null(h)){
alpha_obj <- (alpha_KS3+ (alpha-alpha_KS3)*exp(-((h-0)/lambda)^kapp))
}else{
alpha_obj <- as.numeric(rep(alpha, length(h)))
}
plot(h, alpha_obj)
#bet_result_vec <- c()
if(is.null(bet)){
bet <- 1
}
if(is.null(bet_KS1)){
bet_KS1 <- 1
}
if(!is.null(bet_KS2) & !is.null(h)){
bet_obj <- (bet*exp(-((h-0)/bet_KS2)^(bet_KS1)))
}else{
bet_obj <- as.numeric(rep(bet, length(h)))
}
plot(h, bet_obj)
#sigm_result_vec <- c()
if(is.null(sigm)){
if(!is.null(h) & !is.null(sigm_KS1) & !is.null(sigm_KS2)){
sigm_new <- 1*(1-exp(-(h/sigm_KS2)^(sigm_KS1))) #원 논문이 잘못되어 수정함
}else{
stop("Input error: when sigm is NULL, you must set sigm_KS1, sigm_KS2, and h")
}
}else{
if(!is.null(h) & !is.null(sigm_KS1) & !is.null(sigm_KS2)){
#모수 3개
#if(model=="Shooter"){
sigm_new <- sigm*(1-exp(-(h/sigm_KS2)^(sigm_KS1))) #원 논문이 잘못되어 수정함
#}
}else if(!is.null(h) & is.null(sigm_KS1) & !is.null(sigm_KS2)){
sigm_new <- sigm*(1-exp(-(h/sigm_KS2)^1)) #원 논문이 잘못되어 수정함
}else if(!is.null(sigma) & is.null(sigma_KS1) & !is.null(sigma_KS2)){
#모수 1개
sigm_new <- as.numeric(rep(sigm, length(h)))
#stop("Input error: when sigm is !NULL, you must set sigm_KS1, sigm_KS2, and h")
}
}
sigm_obj <- sigm_new
#plot(h, sigm_obj)
#mu_result_vec <- c()
if(is.null(mu)){
mu <- 1
}
if(is.null(mu_KS1)){
mu_KS1 <- 1
}
if(is.null(mu_KS3)){
mu_KS3 <- 0
}
if(!is.null(mu_KS2) & !is.null(h)){
mu_obj <- mu_KS3+ (mu-mu_KS3)*exp(-(h/mu_KS2)^mu_KS1)
}else{
mu_obj <- as.numeric(rep(mu, length(h)))
}
#plot(h, mu_obj)
#delta_result_vec <- c()
delta_obj <- 1 + exp(-(h/delta1)^(delta2))
#plot(h, 1 + exp(-(h/delta1)^(delta2)) , col="blue", type="l", main=expression(paste("(e) ", delta ,"(h)")), xlab="h", ylab=expression(paste(delta, "(h)")), cex.main=1.5)
#points(h_new, 1 + exp(-(h_new/delta1)^(delta2)), pch=16, col="gray")
rho_obj <- exp(-h/rho)
#plot(h, exp(-h/rho) , type="l", col="blue", main=expression(paste("(f) ", rho ,"(h)")), xlab="h", ylab=expression(paste(rho, "(h)")), cex.main=1.5)
#points(h_new, exp(-h_new/rho), pch=16, col="gray")
res <- list()
res$alpha_obj <- alpha_obj
res$bet_obj <- bet_obj
res$sigm_obj <- sigm_obj
res$mu_obj <- mu_obj
res$delta_obj <- delta_obj
res$rho_obj <- rho_obj
return(res)
}
plot_bootmex_supp_obj <- lapply(bootmex_spatial_obj$boot, function(x) plot_bootmex_supp(h=h_seq, bootmexobj=bootmex_spatial_obj))
plot_bootmex_supp_obj <- lapply(bootmex_spatial_obj$boot, function(x) plot_bootmex_supp(h=h_seq, bootmexobj=x))
plot_bootmex_supp_obj[[i]]$alpha_obj
plot_bootmex_supp_obj[[i]]$bet_obj
plot_bootmex_supp_obj[[2]]$bet_obj
plot_bootmex_supp_obj[[2]]$alpha_obj
alpha_obj_mat
bootmex_spatial_obj$boot[[1]]$dependence
bootmex_spatial_obj$boot[[2]]$dependence
bootmex_spatial_obj$boot[[3]]$dependence
bootmex_spatial_obj$boot[[100]]$dependence
bootmex_spatial_obj$boot[[99]]$dependence
bootmex_spatial_obj$boot[[98]]$dependence
bootmex_spatial_obj$boot[[97]]$dependence
bootmex_spatial_obj$boot[[96]]$dependence
bootmex_spatial_obj$boot[[95]]$dependence
bootmex_spatial_obj$boot[[94]]$dependence
bootmex_spatial_obj$boot[[93]]$dependence
alpha_CI
bet_CI
alpha_CI <- cbind(apply(alpha_obj_mat, 1, function(x) quantile(x, prob=0.05)),
apply(alpha_obj_mat, 1, function(x) quantile(x, prob=0.95)))
bet_CI <- cbind(apply(bet_obj_mat, 1, function(x) quantile(x, prob=0.05)),
apply(bet_obj_mat, 1, function(x) quantile(x, prob=0.95)))
sigm_CI <- cbind(apply(sigm_obj_mat, 1, function(x) quantile(x, prob=0.05)),
apply(sigm_obj_mat, 1, function(x) quantile(x, prob=0.95)))
mu_CI <- cbind(apply(mu_obj_mat, 1, function(x) quantile(x, prob=0.05)),
apply(mu_obj_mat, 1, function(x) quantile(x, prob=0.95)))
delta_CI <- cbind(apply(delta_obj_mat, 1, function(x) quantile(x, prob=0.05)),
apply(delta_obj_mat, 1, function(x) quantile(x, prob=0.95)))
rho_CI <- cbind(apply(rho_obj_mat, 1, function(x) quantile(x, prob=0.05)),
apply(rho_obj_mat, 1, function(x) quantile(x, prob=0.95)
))
bet_CI
sigm_CI
mu_CI
delta_CI
bootmex_spatial_obj2 <- bootmex.spatial(x=mexDep_spatial_obj,
#par.lower=par.lower, par.upper=par.upper, known.par=known.par, par.names=par.names,
#xy_grid=xy_grid,
mexDep_HT= mexDep_imsi, R=5)
gd$dependence$coefficients
gd
gd$dependence$coefficients
bootmex_spatial_obj2 <- bootmex.spatial(x=mexDep_spatial_obj,
#par.lower=par.lower, par.upper=par.upper, known.par=known.par, par.names=par.names,
#xy_grid=xy_grid,
mexDep_HT= mexDep_imsi, R=5)
gd$dependence$coefficients
g
source('~/Dropbox/R files/PCIC/Heffernan/sources/source_SC_texmex_spatial.R', chdir = TRUE)
source('~/Dropbox/R files/PCIC/Heffernan/sources/source_SC_texmex_spatial.R', chdir = TRUE)
bootmex_spatial_obj2 <- bootmex.spatial(x=mexDep_spatial_obj,
#par.lower=par.lower, par.upper=par.upper, known.par=known.par, par.names=par.names,
#xy_grid=xy_grid,
mexDep_HT= mexDep_imsi, R=5)
mexDep_spatial_obj
mexDep_spatial_obj$dependence$xy_grid
object = mexDependence_spatial()
object = mexDependence_spatial
object = mexDep_spatial_obj
object$dependence$spatialmethod
object$dependence$addsigma
