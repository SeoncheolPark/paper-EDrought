mcs112 <- MCS(ndvi.array.flat[,c("X.-115.51", "X.-108.51")]) #positive assoc. between two variables
g1 <- ggplot(mcs112, main="MCS: -115.51 and -108.51")
#If you want to plot bootstrapted interval, (in texmex)
bootMCS112  <- bootMCS(ndvi.array.flat[,c("X.-115.51", "X.-108.51")])
g2 <- ggplot(bootMCS112, main="MCS: -115.51 and -108.51") #MCS with bootstrap CI
gridExtra::grid.arrange(g1, g2, ncol=1)
#end of eda
#(Apr 24) migpd version으로 작성
#migpd_method <- c("GEV", "GPD")
migpd_method <- c("GPD", "GEV")
use_evm <- TRUE
use_constant_threshold <- FALSE; dqu=0.7
ndvi.array.choice <- ndvi.array.annual#.historical
u.array.choice <- u.array.annual
CANGRD.array.choice <- CANGRD.array.annual#.historical
########################################
#Step 3-(a) 자료의 특성에 따라서 우리가 원하는 longlat_index, long_index, lat_index, 그리고 xy_grid를 정의하자
########################################
study_region_index <- c("(a)All", "(b)Palliser", "(c)BC", "(d)Central", "(e)East", "(f)Northern")
study_region <- study_region_index[4]
subsetting <- TRUE
#If you want to do use an expanded grid set,
expanded_griddata <- readRDS("~/Dropbox/R files/PCIC/Heffernan/sources/gridcity.RDS")
if(study_region=="(a)All"){
longlat_index <- which(AllNA3!=0, arr.ind=TRUE)
long_index <- unique(longlat_index[,1])
lat_index <- unique(longlat_index[,2])
xy_grid <- data.frame(Var1=nc_data$dim$longitude$vals[longlat_index[,1]], Var2=nc_data$dim$latitude$vals[longlat_index[,2]])
}else if(study_region=="(b)Palliser"){
#according to WIKI
long_index <- which(nc_data$dim$longitude$vals>=-115 & nc_data$dim$longitude$vals<=-101) #longitude
lat_index <- which(nc_data$dim$latitude$vals>=50 & nc_data$dim$latitude$vals<=53) #latitude
longlat_index <- expand.grid(long_index, lat_index)
xy_grid <- expand.grid(nc_data$dim$longitude$vals[long_index], nc_data$dim$latitude$vals[lat_index])
}else if(study_region=="(c)BC"){
#AllNA3==2
longlat_index <- which(AllNA3==2, arr.ind=TRUE)
long_index <- unique(longlat_index[,1])
lat_index <- unique(longlat_index[,2])
xy_grid <- data.frame(Var1=nc_data$dim$longitude$vals[longlat_index[,1]], Var2=nc_data$dim$latitude$vals[longlat_index[,2]])
}else if(study_region=="(d)Central"){
#AllNA3==1
longlat_index <- which(AllNA3==1, arr.ind=TRUE)
long_index <- unique(longlat_index[,1])
lat_index <- unique(longlat_index[,2])
xy_grid <- data.frame(Var1=nc_data$dim$longitude$vals[longlat_index[,1]], Var2=nc_data$dim$latitude$vals[longlat_index[,2]])
}else if(study_region=="(e)East"){
#AllNA3==4
longlat_index <- which(AllNA3==4, arr.ind=TRUE)
long_index <- unique(longlat_index[,1])
lat_index <- unique(longlat_index[,2])
xy_grid <- data.frame(Var1=nc_data$dim$longitude$vals[longlat_index[,1]], Var2=nc_data$dim$latitude$vals[longlat_index[,2]])
}else if(study_region=="(f)Northern"){
#AllNA3==3
longlat_index <- which(AllNA3==3, arr.ind=TRUE)
long_index <- unique(longlat_index[,1])
lat_index <- unique(longlat_index[,2])
xy_grid <- data.frame(Var1=nc_data$dim$longitude$vals[longlat_index[,1]], Var2=nc_data$dim$latitude$vals[longlat_index[,2]])
}
#켈로나, 사스카툰, 세그니
city <- c("None") #c("Saguenay") #c("Saskatoon") #c("Kelowna")
#city <- c("Kelowna")
city <- c("Saskatoon")
#city <- c("Saguenay")
if(study_region=="(c)BC" & city=="Kelowna"){
loc_Kelowna <- expanded_griddata$city[15,] #켈로나
central_index <- which.min(apply(as.matrix(xy_grid), 1, function(x) sqrt( (x[1]-as.numeric(loc_Kelowna[6]))^2 + (x[2]-as.numeric(loc_Kelowna[5]))^2)))
}else{
central_index <- which(apply(longlat_index, 1, function(x) all(round(apply(longlat_index, 2, median))==x)))
}
plot.divisor <- 1
if(subsetting==TRUE & !(study_region %in% c("(b)Palliser", "(c)BC"))){
#coaser scale
divisor <- sum(longlat_index[central_index,])%%2
subset_index <- which(apply(longlat_index, 1, function(x) sum(x)%%2) == divisor)
longlat_index <- longlat_index[subset_index,]
long_index <- unique(longlat_index[,1])
lat_index <- unique(longlat_index[,2])
xy_grid <- data.frame(Var1=nc_data$dim$longitude$vals[longlat_index[,1]], Var2=nc_data$dim$latitude$vals[longlat_index[,2]])
central_index <- which(apply(longlat_index, 1, function(x) all(round(apply(longlat_index, 2, median))==x)))
plot.divisor <- 2
}
if(study_region=="(d)Central" & city=="Saskatoon"){
loc_Saskatoon <- expanded_griddata$city[12,] #사스카툰
central_index <- which.min(apply(as.matrix(xy_grid), 1, function(x) sqrt( (x[1]-as.numeric(loc_Saskatoon[6]))^2 + (x[2]-as.numeric(loc_Saskatoon[5]))^2)))
}else if(study_region=="(e)East" & city=="Saguenay"){
loc_Saguenay <- expanded_griddata$city[14,] #세그니
central_index <- which.min(apply(as.matrix(xy_grid), 1, function(x) sqrt( (x[1]-as.numeric(loc_Saguenay[6]))^2 + (x[2]-as.numeric(loc_Saguenay[5]))^2)))
}
result_dataset <- c()
CANGRD_dataset <- c()
for(i in 1:nrow(xy_grid)){
x_ind <- match(xy_grid[i,1], as.numeric(dimnames(ndvi.array.annual)[[1]]))
y_ind <- match(xy_grid[i,2], as.numeric(dimnames(ndvi.array.annual)[[2]]))
new_col <- matrix(ndvi.array.choice[x_ind,y_ind,1,], ncol=1)
colnames(new_col)[1] <- paste(xy_grid[i,1], xy_grid[i,2], sep="=")
result_dataset <- cbind(result_dataset, new_col)
CANGRD_col <- matrix(CANGRD.array.choice[x_ind,y_ind,1,], ncol=1)
colnames(CANGRD_col)[1] <- paste(xy_grid[i,1], xy_grid[i,2], sep="=")
CANGRD_dataset <- cbind(CANGRD_dataset, CANGRD_col)
}
central_name <- colnames(result_dataset)[central_index]
########################################
#August 26, 2020: central_index 고르기: .9? return level을 구해서 가장 큰 쪽으로 하자
########################################
if(city!="None"){
change_central=FALSE
}else{
change_central=TRUE
}
if(change_central==TRUE){
dist_min <- min(dist(xy_grid))
central_cand <- which(apply(as.matrix(dist(xy_grid)), 1, function(x) sum(x==dist_min))==4)
#paste(dimnames(ndvi.array.annual)[[1]][43], dimnames(ndvi.array.annual)[[2]][12], sep="=") "-108=51"
compute_gpdRl <- function(x){
fit <- eva::gpdFit(as.numeric(x), threshold=quantile(as.numeric(x), prob=0.7))
gpdRl(fit, period=10, method="delta")$Estimate
}
#central_ind_cand <- strsplit(names(which.max(apply(result_dataset, 2, compute_gpdRl))), split="=")
central_index <- intersect(order(apply(result_dataset, 2, compute_gpdRl), decreasing=TRUE), central_cand)[1]
}
central_name <- colnames(result_dataset)[central_index]
########################################
#(끝) August 26, 2020: central_index 고르기: .9? return level을 구해서 가장 큰 쪽으로 하자
########################################
migpd_obj <- migpd(result_dataset, mqu=0.7)
mexDep_imsi <- mexDependence(x=migpd_obj, which=central_name , dqu=0.7)
CANGRD_obj <- migpd(CANGRD_dataset[-c(1:98),], mth=apply(CANGRD_dataset, 2, quantile, prob=0.7, na.rm=T))
CANGRD_mexDep_imsi <- mexDependence(x=migpd_obj, which=central_name , dqu=0.7)
#boot_imsi <- bootmex(mexDep_imsi)
########################################
#Step 3-(b) when there are more than one unconditional variables (two, three, ...)
########################################
#xy_index_conditional <- c(long_index[5], lat_index, 1)
#xy_index_unconditional <- cbind(long_index[-5], lat_index, 1)
xy_index_conditional <- c(longlat_index[central_index,1], longlat_index[central_index,2], 1)
xy_index_unconditional <- cbind(longlat_index[-central_index,1], longlat_index[-central_index,2], 1)
u <- u.array.choice[xy_index_conditional[1], xy_index_conditional[2], xy_index_conditional[3],]
##data
Y <- mexDep_imsi$margins$transformed
#data_likelihoo의 Inf 처리 필요
#extreme_index <- which(Y[xy_index_conditional[1], xy_index_conditional[2], xy_index_conditional[3],] > u) #approximately 120
extreme_index <- which(Y[,central_index] > u) #approximately 120
data_likelihood <- data.frame(X00=Y[extreme_index, central_index])
for(i in 1:nrow(longlat_index)){
if(i!=central_index){
data_frame_imsi <- data.frame(Y[extreme_index,i])
names(data_frame_imsi) <- paste("X1", i, sep="")
data_likelihood <- cbind(data_likelihood, data_frame_imsi)
#data_likelihood <- cbind(data_likelihood, paste("X1", i, sep="")=Y[xy_index_unconditional[i,1], xy_index_unconditional[i,2], xy_index_unconditional[i,3],extreme_index])
}
}
data <- data_likelihood #for the test purpose
library(Kendall)
Kendall_tau <- c()
for(i in 1:(ncol(data)-1)){
Kendall_tau <- c(Kendall_tau, Kendall(data$X00, data[,(i+1)])$tau[1])
}
par(mfrow=c(2,2))
Kendall(data$X00, data$X11)
hist(data$X11)
hist(data$X12)
hist(data$X13)
hist(data$X14)
########################################
#Step 4: a(h), b(h), mu(h), sigma(h) estimation step
########################################
nonlinear_estimation_obj <- nonlinear_estimation(mexDepobj=mexDep_imsi, xy_grid=xy_grid)
#mexDepobj=mexDep_imsi
########################################
#Step 5: estimation
########################################
##initial values
margins_L <- list( p2q = function(p)ifelse(p < .5, log(2 * p), -log(2 * (1 - p))),
q2p = function(q)ifelse(q < 0, exp(q)/2, 1- 0.5*exp(-q)))
#(SC): there is an R cod mexTransform.R, default method: mixture
#(Apr 17) 아마도 Gumbel 또는 Laplace 마진에 맞추어 x(data)를 바꾸는 함수인듯
x_tr <- mexTransform(migpd_obj, margins = margins_L, method = "mixture", r=NULL) #(SC) marginal transform!
dqu <- 0.7
dth <- quantile(x_tr$transformed[, central_index], dqu) #(SC) if dqu=0.7, it computes 70% quatile
yex <- c(x_tr$transformed[, central_index])
wh <- yex > unique(dth)
#additionally,
#phi in (1,2)
ne <- nonlinear_estimation_obj
ev <- 0.0001
#init.lower <- as.numeric(c(nonlinear_estimation_obj$pars-ev, 0.1, sqrt(2), 0.5,1,0.901,0.01))
#init.upper <- as.numeric(c(nonlinear_estimation_obj$pars+ev, 2, 2, 0.7,2,1.124,2*pi))
init.lower <- as.numeric(c(nonlinear_estimation_obj$pars-ev, min(dist(xy_grid))/5, 1, 0.5,1,0.5,-1))
init.upper <- as.numeric(c(nonlinear_estimation_obj$pars+ev, max(dist(xy_grid))/5, 2, 0.7,2,2,1))
par.names <- c(names(nonlinear_estimation_obj$pars), "rho", "phi", "delta1", "delta2", "Stretch", "Angle")
par.lower <- as.numeric(c(rep(0.0001, length(nonlinear_estimation_obj$pars)), min(dist(xy_grid))/5, 1, 0.01, 0,0.5,-1))
par.upper <- as.numeric(c(rep(Inf, length(nonlinear_estimation_obj$pars)), max(dist(xy_grid))/5, 2, Inf, Inf,2,1))
if("sigm"%in%par.names){
par.lower[which(par.names=="sigm")] <- 0.2
}
#init.lower <- c(1, 8, 0.4, 0.1, sqrt(2), 0.9,-0.2,0.5,1,0.9,0.01)
#init.upper <- c(2.5, 49, 1, 2, 2, 1.2,0.2,0.7,2,1.2,2*pi)
#init.lower <- c(ne$kapp-ev, ne$lambda-ev, ne$bet-ev, ne$bet_KS1-ev, ne$bet_KS2-ev, 0.1, sqrt(2), ne$sigm-ev, ne$sigm_KS1-ev, ne$sigm_KS2-ev, ne$mu-ev, ne$mu_KS1-ev, ne$mu_KS2-ev, ne$mu_KS3-ev, 0.5,1,0.8,0.01)
#init.upper <- c(ne$kapp+ev, ne$lambda+ev, ne$bet+ev, ne$bet_KS1+ev, ne$bet_KS2+ev, 2, 2, ne$sigm+ev, ne$sigm_KS1+ev, ne$sigm_KS2+ev, ne$mu+ev, ne$mu_KS1+ev, ne$mu_KS2+ev, ne$mu_KS3+ev, 0.7,2,1.2,2*pi)
#par.names <- c("kapp", "lambda", "bet", "bet_KS1", "bet_KS2", "rho", "phi", "sigm", "sigm_KS1", "sigm_KS2", "mu", "mu_KS1", "mu_KS2", "mu_KS3", "delta1", "delta2", "Stretch", "Angle")
#par.lower <- c(0.01, 0.01, -1, 0.5, 1, 0.5, -1.2, 0.01, -Inf,0.8,0.01)
#par.upper <- c(Inf, Inf, 1, 0.99, 2, 1,2, 1.2, Inf, Inf,1.1,2*pi)
#par.lower <- c(ne$kapp-ev, ne$lambda-ev, ne$bet-ev, ne$bet_KS1-ev, ne$bet_KS2-ev, 0.5, 1, ne$sigm-ev, ne$sigm_KS1-ev, ne$sigm_KS2-ev, ne$mu-ev, ne$mu_KS1-ev, ne$mu_KS2-ev, ne$mu_KS3-ev, 0.01, -Inf,0.8,0.01)
#par.upper <- c(ne$kapp+ev, ne$lambda+ev, ne$bet+ev, ne$bet_KS1+ev, ne$bet_KS2+ev, 0.99, 2, ne$sigm+ev, ne$sigm_KS1+ev, ne$sigm_KS2+ev, ne$mu+ev, ne$mu_KS1+ev, ne$mu_KS2+ev, ne$mu_KS3+ev, Inf, Inf,1.2,2*pi)
known.par <- rep(NA, length(par.names))#; known.par[1] <- 1
#known.par <-  c(ne$kapp, ne$lambda, ne$bet, ne$bet_KS1, ne$bet_KS2, NA, NA, ne$sigm, ne$sigm_KS1, ne$sigm_KS2, ne$mu, ne$mu_KS1, ne$mu_KS2, ne$mu_KS3, NA, NA, NA ,NA)
aniso <- FALSE
aniso <- TRUE
global.min <- 0
tol <- 1e-2
time_init <- Sys.time()
#(8개를 넣는다면) 순서대로 "kapp", "lambda", "bet", "rho", "sigm", "mu", "delta1", "delta2"
#(9개를 넣는다면) 순서대로 "kapp", "lambda", "bet", "rho", "sigm_KS1", "sigm_KS2", "mu", "delta1", "delta2"
param_init2 <- GenSA(lower=init.lower, upper=init.upper,
fn= composite_likelihood_parallel,
par.names=par.names, known.par=known.par,
data=x_tr$transformed[wh,], xy_grid=xy_grid, spatialmethod="Shooter",
aniso=aniso, xy_grid_cond_index=central_index, modelbeta="SC", addsigma=FALSE,verbose=FALSE, nonlinear.obj=ne,
control=list(threshold.stop=global.min+tol, max.time=60, maxit=30))
param2 <- matrix(param_init2$par,nrow=1)
colnames(param2) <- par.names
composite_likelihood_parallel(par=param2, data=x_tr$transformed[wh,], xy_grid=xy_grid,par.names=par.names, known.par=known.par,
spatialmethod="Shooter", aniso=aniso, xy_grid_cond_index=central_index, modelbeta="SC", addsigma=FALSE,verbose=FALSE,
nonlinear.obj = ne)
mexDep_spatial_obj <- mexDependence_spatial(x=migpd_obj, which=central_name , dqu=0.7, xy_grid=xy_grid, start=param2,
par.lower=par.lower, par.upper=par.upper,
par.names=par.names, modelbeta="SC", addsigma=FALSE, verbose=FALSE, mexDep_HT=mexDep_imsi,
known.par=known.par, spatialmethod="Shooter", aniso=aniso, nonlinear.obj = ne, skip.opt=TRUE)
#x=migpd_obj; which=central_name; dqu=0.7; xy_grid; start=param2
#par.names=c("kapp", "lambda", "bet", "rho", "sigm", "mu", "delta1", "delta2"); known.par=c(NA,NA,NA,NA,NA,NA,NA,NA);  par.lower=c(0.01, 0.01, 0, 0, 0.5, -Inf, 0.01, -Inf); par.upper=c(Inf, Inf, 0.99, 0.99, Inf, Inf, Inf, Inf)
#spatialmethod="Shooter"; aniso=FALSE; addsigma=TRUE; modelbeta="SC"
#margins = "laplace"; constrain=FALSE; v = 10; maxit=1000000; nOptim = 1; marTransform="mixture"; referenceMargin=NULL
#PlotLikDo=FALSE; xy_grid_cond_index=NULL; model="Shooter"; use.supp=TRUE; use.initial=FALSE; use.tapering=TRUE; verbose=TRUE
if(abs(mexDep_spatial_obj$dependence$loglik)>1000000){
mexDep_spatial_obj$dependence$coefficients <- as.matrix(param_init2$par, ncol=1)
rownames(mexDep_spatial_obj$dependence$coefficients) <- par.names
}
mexDep_spatial_obj$dependence$loglik
length(mexDep_spatial_obj$dependence$coefficients)
sum(mexDep_imsi$dependence$loglik)
########################################
#Step 6: prediction
########################################
## If you want to add more locations,
add.location <- FALSE
if(add.location==TRUE){
if(study_region=="(a)All"){
pred_additionalloc <- expanded_griddata$AllNA[which(expanded_griddata$AllNA$All==1),c(1:2)]
}else if(study_region=="(b)Palliser"){
pred_additionalloc <- expanded_griddata$AllNA[which(expanded_griddata$AllNA$Palliser==1),c(1:2)]
}else if(study_region=="(c)BC"){
pred_additionalloc <- expanded_griddata$AllNA[which(expanded_griddata$AllNA$BC==1),c(1:2)]
}else if(study_region=="(d)Central"){
pred_additionalloc <- expanded_griddata$AllNA[which(expanded_griddata$AllNA$Central==1),c(1:2)]
}else if(study_region=="(e)East"){
pred_additionalloc <- expanded_griddata$AllNA[which(expanded_griddata$AllNA$East==1),c(1:2)]
}else if(study_region=="(f)Northern"){
pred_additionalloc <- expanded_griddata$AllNA[which(expanded_griddata$AllNA$Northern==1),c(1:2)]
}
}
pred_additionalloc <- pred_additionalloc[!duplicated(pred_additionalloc),]
pred_additionalloc <- data.frame(Var1=pred_additionalloc[,1], Var2=pred_additionalloc[,2])
mexDep_spatial_obj_pred <- predict.mexspatial(mexDep_spatial_obj, pqu=0.71, maxpqu=0.99, predmodel="Shooter",
pred_additionalloc = pred_additionalloc)# default
## (END) If you want to add more locations,
#mexDep_spatial_obj_pred <- predict.mexspatial(mexDep_spatial_obj, smoothZdistribution=TRUE)
mexDep_spatial_obj_pred <- predict.mexspatial(mexDep_spatial_obj, pqu=0.71, maxpqu=0.99, predmodel="Shooter")# default
#object <- mexDep_spatial_obj; pqu=0.79; maxpqu=0.81; predmodel="Shooter"; throwdist="unif"; nsim = 1000; smoothZdistribution=FALSE
mexDep_spatial_obj_pred_8 <- predict.mexspatial(mexDep_spatial_obj, pqu=0.79, maxpqu=0.81, predmodel="Shooter")# default
mexDep_spatial_obj_pred_9 <- predict.mexspatial(mexDep_spatial_obj, pqu=0.89, maxpqu=0.91, predmodel="Shooter")# default
mexDep_spatial_obj_pred_95 <- predict.mexspatial(mexDep_spatial_obj, pqu=0.94, maxpqu=0.96, predmodel="Shooter")# defaultmexDep_spatial_obj_pred_95 <- predict.mexspatial(mexDep_spatial_obj, pqu=0.94, maxpqu=0.96)# default
mexDep_spatial_obj_pred_99 <- predict.mexspatial(mexDep_spatial_obj, pqu=0.985, maxpqu=0.995, predmodel="Shooter")# default
pred_val_8 <- apply(mexDep_spatial_obj_pred_8$data$simulated, 2, mean)
pred_val_9 <- apply(mexDep_spatial_obj_pred_9$data$simulated, 2, mean)
pred_val_95 <- apply(mexDep_spatial_obj_pred_95$data$simulated, 2, mean)
pred_val_99 <- apply(mexDep_spatial_obj_pred_99$data$simulated, 2, mean)
pred_val_8 <- pred_val_8[match(colnames(mexDep_spatial_obj$margins$data), names(pred_val_8))]
pred_val_9 <- pred_val_9[match(colnames(mexDep_spatial_obj$margins$data), names(pred_val_9))]
pred_val_95 <- pred_val_95[match(colnames(mexDep_spatial_obj$margins$data), names(pred_val_95))]
pred_val_99 <- pred_val_99[match(colnames(mexDep_spatial_obj$margins$data), names(pred_val_99))]
xy_expand <- expand.grid(nc_data$dim$longitude$vals, nc_data$dim$latitude$vals)
setwd("~/Dropbox/앱/ShareLaTeX/(Park)EDrought/images")
#pdf("Centralnonlinear.pdf", 8, 5)
#png("Centralnonlinear.png", 800, 500)
par(mar=c(4.1,5.1,3.1,3.1))
par(mfrow=c(2,2))
quilt.plot(xy_expand, as.vector(AllNA), nx=101, ny=46, add.legend = FALSE, xlab="Lon", ylab="Lat",col = gray.colors(3), main="(a) Nonlinear, 0.8q")
quilt.plot(xy_grid[,1], xy_grid[,2], pred_val_8, add=T, nx=length(unique(xy_grid[,1]))/plot.divisor, ny=length(unique(xy_grid[,2]))/plot.divisor)
points(xy_grid[central_index,1], xy_grid[central_index,2], pch=0)
quilt.plot(xy_expand, as.vector(AllNA), nx=101, ny=46, add.legend = FALSE, xlab="Lon", ylab="Lat",col = gray.colors(3), main="(b) Nonlinear, 0.9q")
quilt.plot(xy_grid[,1], xy_grid[,2], pred_val_9, add=T, nx=length(unique(xy_grid[,1]))/plot.divisor, ny=length(unique(xy_grid[,2]))/plot.divisor)
quilt.plot(xy_expand, as.vector(AllNA), nx=101, ny=46, add.legend = FALSE, xlab="Lon", ylab="Lat",col = gray.colors(3), main="(c) Nonlinear, 0.95q")
quilt.plot(xy_grid[,1], xy_grid[,2], pred_val_95, add=T, nx=length(unique(xy_grid[,1]))/plot.divisor, ny=length(unique(xy_grid[,2]))/plot.divisor)
quilt.plot(xy_expand, as.vector(AllNA), nx=101, ny=46, add.legend = FALSE, xlab="Lon", ylab="Lat",col = gray.colors(3), main="(d) Nonlinear, 0.99q")
quilt.plot(xy_grid[,1], xy_grid[,2], pred_val_99, add=T, nx=length(unique(xy_grid[,1]))/plot.divisor, ny=length(unique(xy_grid[,2]))/plot.divisor)
newdqu <- as.integer(10*dqu)
period_a <- "Summer-Autumn"
save_name <- paste(study_region, period_a, study_model, newdqu, central_index, "001-100", sep="_")
save_name
bootmex_start <- TRUE
time_init <- Sys.time()
if(bootmex_start==TRUE){
bootmex_spatial_obj <- bootmex.spatial(x=mexDep_spatial_obj,
#par.lower=par.lower, par.upper=par.upper, known.par=known.par, par.names=par.names,
#xy_grid=xy_grid,
mexDep_HT= mexDep_imsi, R=100)
}
setwd("~/Dropbox/R files/PCIC/Heffernan/BootCI/")
saveRDS(bootmex_spatial_obj, file=paste(save_name[1], '_bootmex.RDS', sep=""))
library(gridBase)
library(ggplot2)
# say I would like to have my regular R graphic in top-right quadrant
par(mfrow = c(2,2), mar=c(0,0,0,0), oma=c(0,0,0,0))
# leave top-left quadrant empty!
plot.new()
# plot regular R graphic in top-right quadrant
plot(seq(1:10), seq(1:10), pch = 20)
# now add the first ggplot element which is going to take
# up the left two quadrants
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top),
y = 1, x = 0.5)
print(my.first.ggplot.obj, vp = vp)
# add the second ggplot element in the bottom right quadrant
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top),
y = 0.5, x = 0.5)
print(my.second.ggplot.obj, vp = vp)
library(gridBase)
library(ggplot2)
# say I would like to have my regular R graphic in top-right quadrant
par(mfrow = c(2,2), mar=c(0,0,0,0), oma=c(0,0,0,0))
# leave top-left quadrant empty!
plot.new()
# plot regular R graphic in top-right quadrant
plot(seq(1:10), seq(1:10), pch = 20)
# now add the first ggplot element which is going to take
# up the left two quadrants
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"),
y = 1, x = 0.5)
print(my.first.ggplot.obj, vp = vp)
# add the second ggplot element in the bottom right quadrant
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top),
y = 0.5, x = 0.5)
print(my.second.ggplot.obj, vp = vp)
library(gridBase)
library(ggplot2)
# say I would like to have my regular R graphic in top-right quadrant
par(mfrow = c(2,2), mar=c(0,0,0,0), oma=c(0,0,0,0))
# leave top-left quadrant empty!
plot.new()
# plot regular R graphic in top-right quadrant
plot(seq(1:10), seq(1:10), pch = 20)
# now add the first ggplot element which is going to take
# up the left two quadrants
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"),
y = 1, x = 0.5)
print(my.first.ggplot.obj, vp = vp)
# add the second ggplot element in the bottom right quadrant
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"),
y = 0.5, x = 0.5)
print(my.second.ggplot.obj, vp = vp)
library(gridBase)
library(ggplot2)
# say I would like to have my regular R graphic in top-right quadrant
par(mfrow = c(2,2), mar=c(0,0,0,0), oma=c(0,0,0,0))
# leave top-left quadrant empty!
plot.new()
# plot regular R graphic in top-right quadrant
plot(seq(1:10), seq(1:10), pch = 20)
# now add the first ggplot element which is going to take
# up the left two quadrants
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"),  y = 1, x = 0.5)
print(my.first.ggplot.obj, vp = vp)
# add the second ggplot element in the bottom right quadrant
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"), y = 0.5, x = 0.5)
print(my.second.ggplot.obj, vp = vp)
library(gridBase)
library(ggplot2)
# say I would like to have my regular R graphic in top-right quadrant
par(mfrow = c(2,2), mar=c(0,0,0,0), oma=c(0,0,0,0))
# leave top-left quadrant empty!
plot.new()
# plot regular R graphic in top-right quadrant
plot(seq(1:10), seq(1:10), pch = 20)
# now add the first ggplot element which is going to take
# up the left two quadrants
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"),  y = 1, x = 0.5)
#print(my.first.ggplot.obj, vp = vp)
# add the second ggplot element in the bottom right quadrant
vp <- viewport(height = unit(1,"npc"), width=unit(0.5, "npc"),
just = c("left","top"), y = 0.5, x = 0.5)
#print(my.second.ggplot.obj, vp = vp)
library(grid)
library(ggplot2)
library(gridBase)
a_ggplot <- ggplot(cars, aes(speed, dist)) + geom_point()
#Create figure window and layout
plot.new()
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
#Draw ggplot
pushViewport(viewport(layout.pos.col = 1))
print(a_ggplot, newpage = FALSE)
popViewport()
#Draw bsae plot
pushViewport(viewport(layout.pos.col = 2))
par(fig = gridFIG(), new = TRUE)
with(cars, plot(speed, dist))
popViewport()
#Create figure window and layout
plot.new()
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
#Draw ggplot
pushViewport(viewport(layout.pos.col = 1))
print(a_ggplot, newpage = FALSE)
popViewport()
#Draw bsae plot
pushViewport(viewport(layout.pos.col = 2))
par(fig = gridFIG(), new = TRUE)
with(cars, plot(speed, dist))
popViewport()
#Create figure window and layout
plot.new()
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
#Draw ggplot
pushViewport(viewport(layout.pos.col = 1))
print(a_ggplot, newpage = FALSE)
popViewport()
#Draw bsae plot
pushViewport(viewport(layout.pos.col = 2))
par(fig = gridFIG(), new = TRUE)
with(cars, plot(speed, dist))
popViewport()
grid.layout()
help("grid.layout")
a_ggplot <- ggplot(cars, aes(speed, dist)) + geom_point()
#Create figure window and layout
plot.new()
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
help(gridFIG)
help(with)
t <- c(1:(24*14))
P <- 24
A <- 10
y <- A*sin(2*pi*t/P)+20
par(mfrow=c(2,2))
plot(y,type = "l",xlab = "Time (hours)",ylab = "Amplitude",main = "Time series")
acf(y,main = "Autocorrelation",xlab = "Lag (hours)", ylab = "ACF")
spectrum(y,method = "ar",main = "Spectral density function",
xlab = "Frequency (cycles per hour)",ylab = "Spectrum")
require(biwavelet)
t1 <- cbind(t, y)
wt.t1=wt(t1)
plot(wt.t1, plot.cb=FALSE, plot.phase=FALSE,main = "Continuous wavelet transform",
ylab = "Period (hours)",xlab = "Time (hours)")
install.packages("biwavelet")
t <- c(1:(24*14))
P <- 24
A <- 10
y <- A*sin(2*pi*t/P)+20
par(mfrow=c(2,2))
plot(y,type = "l",xlab = "Time (hours)",ylab = "Amplitude",main = "Time series")
acf(y,main = "Autocorrelation",xlab = "Lag (hours)", ylab = "ACF")
spectrum(y,method = "ar",main = "Spectral density function",
xlab = "Frequency (cycles per hour)",ylab = "Spectrum")
require(biwavelet)
t1 <- cbind(t, y)
wt.t1=wt(t1)
plot(wt.t1, plot.cb=FALSE, plot.phase=FALSE,main = "Continuous wavelet transform",
ylab = "Period (hours)",xlab = "Time (hours)")
require(ggplot2)
acz <- acf(y, plot=F)
acd <- data.frame(lag=acz$lag, acf=acz$acf)
ggplot(acd, aes(lag, acf)) + geom_area(fill="grey") +
geom_hline(yintercept=c(0.05, -0.05), linetype="dashed") +
theme_bw()
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
library(gridBase)
library(grid)
par(mfrow=c(2, 2))
plot(y,type = "l",xlab = "Time (hours)",ylab = "Amplitude",main = "Time series")
plot(wt.t1, plot.cb=FALSE, plot.phase=FALSE,main = "Continuous wavelet transform",
ylab = "Period (hours)",xlab = "Time (hours)")
spectrum(y,method = "ar",main = "Spectral density function",
xlab = "Frequency (cycles per hour)",ylab = "Spectrum")
## the last one is the current plot
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values
require(ggplot2)
acz <- acf(y, plot=F)
acd <- data.frame(lag=acz$lag, acf=acz$acf)
p <- ggplot(acd, aes(lag, acf)) + geom_area(fill="grey") +
geom_hline(yintercept=c(0.05, -0.05), linetype="dashed") +
theme_bw()+labs(title= "Autocorrelation\n")+
## some setting in the title to get something near to the other plots
theme(plot.title = element_text(size = rel(1.4),face ='bold'))
print(p,vp = vp1)        ## suggested by @bpatiste
